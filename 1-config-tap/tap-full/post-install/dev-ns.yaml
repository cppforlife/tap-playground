#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:json", "json")

apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: default
type: kubernetes.io/dockerconfigjson
data:
  #@ docker_auth = base64.encode("{}:{}".format(data.values.rw_app_registry.username, data.values.rw_app_registry.password))
  #@ docker_creds = {"username": data.values.rw_app_registry.username, "password": data.values.rw_app_registry.password, "auth": docker_auth}
  .dockerconfigjson: #@ base64.encode(json.encode({"auths": {data.values.rw_app_registry.server_repo.split("/", 1)[0]: docker_creds}}))
---
apiVersion: v1
kind: Secret
metadata:
  name: tap-registry
  namespace: default
  annotations:
    secretgen.carvel.dev/image-pull-secret: ""
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: e30K
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: service-account
  namespace: default
secrets:
- name: registry-credentials
imagePullSecrets:
- name: registry-credentials
- name: tap-registry
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kapp-permissions
  namespace: default
  annotations:
    kapp.k14s.io/change-group: "role"
rules:
- apiGroups:
    - servicebinding.io
  resources: ['servicebindings']
  verbs: ['*']
- apiGroups:
    - serving.knative.dev
  resources: ['services']
  verbs: ['*']
- apiGroups: [""]
  resources: ['configmaps']
  verbs: ['get', 'watch', 'list', 'create', 'update', 'patch', 'delete']
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kapp-permissions
  namespace: default
  annotations:
    kapp.k14s.io/change-rule: "upsert after upserting role"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kapp-permissions
subjects:
- kind: ServiceAccount
  name: service-account
